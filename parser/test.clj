(use 'org.stoop.codParser 'org.stoop.codData 'org.stoop.codAnalytics     'clojure.contrib.json.write 'clojure.contrib.duck-streams 'clojure.contrib.seq-utils)(defn write-award [file award-name award-data]  (spit file (json-str {:award award-name :data award-data})));Name resolution functions(defn is-alias? [player-one player-two]  (or (= (:name player-one) (:name player-two))      (= (:id player-one) (:id player-two))))(defn get-aliases [log-seq nested-keys player-object]  (get-unique-from-seq    (filter #(is-alias? player-object (get-in % nested-keys)) log-seq)   nested-keys))(defn get-nth-level-aliases [log-seq nested-keys player-object n]  (loop [accum-aliases []	 aliases [player-object]	 iteration n]    (if (< iteration 0)      accum-aliases      (recur (distinct (concat accum-aliases aliases))	     (filter #(not (includes? accum-aliases %)) (mapcat #(get-aliases log-seq nested-keys %) aliases))	     (dec iteration)))));File watching functions(defn tail-f [file delay action]  (let [keep-running (atom true)	current-line (StringBuilder.)	thread (Thread. #(try			  (with-open[fis (java.io.FileInputStream. file)]			    (while @keep-running			      (let [input-char (.read fis)]				(cond 				  (= input-char -1) (Thread/sleep delay)				  				  (= (char input-char) \newline)				  (do				    (action (.toString current-line))				    (.setLength current-line 0))				  				  true (.append current-line (char input-char))))))			  (catch java.io.FileNotFoundException e			    (println "File " file " does not exist."))			  (catch SecurityException e			    (println "Security denies access to " file e))			  (catch java.io.IOException e			    (println "Error reading file " file e))			  (catch InterruptedException e			    (println "Thread interrupted while reading " file e))))]    {:start #(.start thread)     :stop #(do (reset! keep-running false)		(.join thread)		(println "tail-f has stopped."))}))