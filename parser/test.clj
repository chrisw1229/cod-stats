(use 'org.stoop.codParser 'org.stoop.parser)(defn parse [tokens parser]  (let [[product state :as result] (parser (struct state-s tokens 0 0))]    (println state)    product))(defn parse-log [file]  (parse (slurp file) log-file))(defn get-log-type [log-seq predicate]  (filter #(predicate (:entry %)) log-seq))(defn select-player-from-seq [log-seq name-field name]  (filter #(.equalsIgnoreCase name (get-in % [:entry name-field :name])) log-seq))(defn get-unique-names-from-seq [log-seq name-field]  (distinct (doall (map #(get-in % [:entry name-field :name]) log-seq))))(defn get-total-damage [dk-seq player-name]  (let [dk-good-recs (get-log-type dk-seq #(not (team-damage? %)))	player-dks (select-player-from-seq dk-good-recs :attacker player-name)]    (reduce + (doall (map #(get-in % [:entry :hit-details :damage]) player-dks)))))(defn get-num-kills [dk-seq player-name]  (let [dk-good-recs (get-log-type dk-seq #(not (team-damage? %)))	k-good-recs (get-log-type dk-good-recs kill?)	player-ks (select-player-from-seq k-good-recs :attacker player-name)]    (count player-ks)))(defstruct p-v-struct :player :value)(defn rank-num-kills [dk-seq]  (let [player-seq (remove nil? (get-unique-names-from-seq dk-seq :attacker))]    (reverse (sort-by :value (doall (map #(struct p-v-struct % (get-num-kills dk-seq %)) player-seq))))))(defn rank-total-dam [dk-seq]  (let [player-seq (remove nil? (get-unique-names-from-seq dk-seq :attacker))]    (reverse (sort-by :value (doall (map #(struct p-v-struct % (get-total-damage dk-seq %)) player-seq))))))