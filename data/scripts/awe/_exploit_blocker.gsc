//
// Exploit blocking functions
//
// By bell(http://www.awemod.com) and innocent bystander(http://www.after-hourz.com/)
//

blockBox(origin,size)
{
	if( !maps\mp\gametypes\_awe::cvardef("awe_fix_map_exploits",1,0,1,"int") ) return;

	blocker = spawn("script_origin", origin);
	blocker setbounds( ((0,0,0)-size), size );
	blocker setcontents(1);

	if(getcvar("g_exploit_debug") == "1")
	{
		x = size[0];
		y = size[1];
		z = size[2];
		for(;;)
		{
			line(origin + (0-x,  y,  z), origin + (  x,  y,  z), (1,0,0));
			line(origin + (0-x,  y,0-z), origin + (  x,  y,0-z), (1,0,0));
			line(origin + (0-x,  y,  z), origin + (0-x,  y,0-z), (1,0,0));
			line(origin + (  x,  y,  z), origin + (  x,  y,0-z), (1,0,0));

			line(origin + (0-x,0-y,  z), origin + (  x,0-y,  z), (0,1,0));
			line(origin + (0-x,0-y,0-z), origin + (  x,0-y,0-z), (0,1,0));
			line(origin + (0-x,0-y,  z), origin + (0-x,0-y,0-z), (0,1,0));
			line(origin + (  x,0-y,  z), origin + (  x,0-y,0-z), (0,1,0));

			line(origin + (0-x,  y,  z), origin + (0-x,0-y,  z), (0,0,1));
			line(origin + (  x,  y,  z), origin + (  x,0-y,  z), (0,0,1));
			line(origin + (0-x,  y,0-z), origin + (0-x,0-y,0-z), (0,0,1));
			line(origin + (  x,  y,0-z), origin + (  x,0-y,0-z), (0,0,1));

			line(origin + (0-x,0-y,  z), origin + (  x,  y,0-z), (1,0,1));
			line(origin + (0-x,  y,  z), origin + (  x,0-y,0-z), (1,0,1));
			line(origin + (  x,0-y,  z), origin + (0-x,  y,0-z), (1,0,1));
			line(origin + (  x,  y,  z), origin + (0-x,0-y,0-z), (1,0,1));

			wait .05;
		}
	}
}

//other comparisons are "lt", "gt", or "eq"
sharkScanner(zlevel, thrshold, comp) {
	if( !maps\mp\gametypes\_awe::cvardef("awe_fix_map_exploits",1,0,1,"int") ) return;

	wait (15);
	
//	iprintln ("Checking to see if player level is " + comp + " " + zlevel + " for " + thrshold + " times");

	for (;;)	{
		
		players = getentarray( "player", "classname" );
		for ( i = 0; i < players.size; i++ ) {

			player = players[i];
			if (!isdefined(player.sharkcount)) {
				player.sharkcount = 0;
				player.lastZ = 0;
			}
				
			//iprintln ("Checking " + player.name + ", sharkcount = " + player.sharkcount + ", zlevel = " + player.origin[2] + ", lastZ = " + player.lastZ);

			if ( isdefined( player ) && isalive(player)) {
				//let's check them
				if (comp == "lt") {
					if (player.origin[2] < zlevel) {
						if (player.sharkcount == 0) {
							player.lastZ = player.origin[2];
							player.sharkcount++;
				//			iprintln("Bumping sharkcount to " + player.sharkcount);
						} else {
							if (player.lastZ == player.origin[2]) {
								player.sharkcount++;						
					//			iprintln("Bumping sharkcount to " + player.sharkcount);
							} else
								player.sharkcount = 0;						
						}
					}
				} else if (comp == "gt") {
					if (player.origin[2] > zlevel) {
						if (player.sharkcount == 0) {
							player.lastZ = player.origin[2];
							player.sharkcount++;
//							iprintln("Bumping sharkcount to " + player.sharkcount);
							if (player.lastZ == player.origin[2]) {
								player.sharkcount++;						
//								iprintln("Bumping sharkcount to " + player.sharkcount);
							} else
								player.sharkcount = 0;						
						}
					}		
				} else if (comp == "eq") {
				
					if (player.origin[2] == zlevel) {

						if (player.sharkcount == 0) {

							player.lastZ = player.origin[2];
							player.sharkcount = player.sharkcount + 1;
//							iprintln("Bumping sharkcount to " + player.sharkcount);

						} else {
		
							if (player.lastZ == player.origin[2]) {
							
								player.sharkcount = player.sharkcount + 1;
//								iprintln("Bumping sharkcount to " + player.sharkcount);
								
							} else {
								player.sharkcount = 0;						
							}
						
						}
					}		
				} //if (comp == 
				
				if (player.sharkcount == thrshold) {
//					iprintln ("Kill player: sharkcount = " + player.sharkcount + ", threshold = " + thrshold);
									  killAndLog( player );
				  player.sharkcount = 0;
				}

			} //if ( isdefined( player ) && isalive(player))
		} //for players
		wait( 5 );
	} //for ;;
}

killAndLog( player ) {

	//log the action taken 
	lpselfnum = player getEntityNumber();
	lpselfname = player.name;
	lpselfteam = player.pers["team"];
	lpselfguid = player getGuid();
	logPrint("A;" + lpselfguid + ";" + lpselfnum + ";" + lpselfteam + ";" + lpselfname + ";" + "Exploit abuser was suicided by server" + "\n");
	//kill the perp and warn them
	player iprintlnbold("^1Do not exploit map flaws on this server!");
	player suicide();
	player notify ("death");
	
	//let everyone know what happened
	iprintln ("^1SERVER MESSAGE: ^7" + player.name + " ^1was prevented from going under the map.");
}